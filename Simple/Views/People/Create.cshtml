@model Person

@{
    ViewData["Title"] = "Create Person";
}

<article class="m-5 row">
    <form class="col-12 p-5" asp-action="Create" asp-controller="People">
        <div asp-validation-summary="All" class="text-danger"></div>
        <div class="form-group">
            <label asp-for="FirstName"></label>
            <input asp-for="FirstName" class="form-control" />
            <span asp-validation-for="FirstName" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="LastName"></label>
            <input asp-for="LastName" class="form-control" />
            <span asp-validation-for="LastName" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Email"></label>
            <input asp-for="Email" class="form-control" />
            <span asp-validation-for="Email" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="BirthDate"></label>
            <input asp-for="BirthDate" class="form-control" />
            <span asp-validation-for="BirthDate" class="text-danger"></span>
        </div>
        <div class="form-row">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </form>
</article>

@section Scripts{
    <partial name="_ValidationScriptsPartial" />
    <script>
        // <snippet_UnobtrusiveValidation>
        $.validator.addMethod('people',
            function (value, element, params) {
                // Get element value. Classic genre has value '0'.
                debugger;
                var genre = $(params[0]).val(),
                    year = params[1],
                    date = new Date(value);
                if (genre && genre.length > 0 && genre[0] === '0') {
                    // Since this is a classic movie, invalid if release date is after given year.
                    return date.getUTCFullYear() <= year;
                }

                return true;
            });

        $.validator.unobtrusive.adapters.add('people', ['year'],
            function (options) {
                debugger;
                var element = $(options.form).find('select#Genre')[0];
                options.rules['people'] = [element, parseInt(options.params['year'])];
                options.messages['people'] = options.message;
            });
        // </snippet_UnobtrusiveValidation>




        $.get({
            url: "https://url/that/returns/a/form",
            dataType: "html",
            error: function (jqXHR, textStatus, errorThrown) {
                alert(textStatus + ": Couldn't add form. " + errorThrown);
            },
            success: function (newFormHTML) {
                var container = document.getElementById("form-container");
                container.insertAdjacentHTML("beforeend", newFormHTML);
                var forms = container.getElementsByTagName("form");
                var newForm = forms[forms.length - 1];
                $.validator.unobtrusive.parse(newForm);
            }
        })

        $.get({
            url: "https://url/that/returns/a/control",
            dataType: "html",
            error: function (jqXHR, textStatus, errorThrown) {
                alert(textStatus + ": Couldn't add control. " + errorThrown);
            },
            success: function (newInputHTML) {
                var form = document.getElementById("my-form");
                form.insertAdjacentHTML("beforeend", newInputHTML);
                $(form).removeData("validator")    // Added by jQuery Validate
                    .removeData("unobtrusiveValidation");   // Added by jQuery Unobtrusive Validation
                $.validator.unobtrusive.parse(form);
            }
        })

        $.validator.addMethod('classicmovie',
            function (value, element, params) {
                // Get element value. Classic genre has value '0'.
                var genre = $(params[0]).val(),
                    year = params[1],
                    date = new Date(value);
                if (genre && genre.length > 0 && genre[0] === '0') {
                    // Since this is a classic movie, invalid if release date is after given year.
                    return date.getUTCFullYear() <= year;
                }

                return true;
            });

        $.validator.unobtrusive.adapters.add('classicmovie',
            ['year'],
            function (options) {
                var element = $(options.form).find('select#Genre')[0];
                options.rules['classicmovie'] = [element, parseInt(options.params['year'])];
                options.messages['classicmovie'] = options.message;
            });


        //<input class="form-control" type="datetime"
        //    data-val="true"
        //    data-val-classicmovie1="Classic movies must have a release year earlier than 1960."
        //    data-val-classicmovie1-year="1960"
        //    data-val-required="The ReleaseDate field is required."
        //    id="ReleaseDate" name="ReleaseDate" value="">



    </script>
}